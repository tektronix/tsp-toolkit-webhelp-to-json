beeper.beep()
duration: number
frequency: number

bufferVar.appendmode
state: 0|1

bufferVar.basetimestamp
basetime: number

bufferVar.cachemode
cacheMode: 0|1

bufferVar.capacity
bufferCapacity: integer
bufferVar: bufferVar

bufferVar.clear()
bufferVar: bufferVar


bufferVar.clearcache()
bufferVar: bufferVar

bufferVar.collectsourcevalues
state: 0|1

bufferVar.collecttimestamps
state: 0|1

bufferVar.fillcount
fillCount: integer


bufferVar.fillmode
fillMode: bufferVarfillmodefillMode
bufferVar: bufferVar

bufferVar.measurefunctions
measurefunction: string[]
bufferVar: bufferVar

bufferVar.measureranges
measurerange: number[]

bufferVar.n 
numberOfReadings: integer
bufferVar: bufferVar

bufferVar.readings
reading: number[]
bufferVar: bufferVar
N: number

bufferVar.sourcefunctions
sourcefunction: string[]
bufferVar: bufferVar

bufferVar.sourceoutputstates
state: string[]
bufferVar: bufferVar

bufferVar.sourceranges
sourcerange: number[]
bufferVar: bufferVar

bufferVar.sourcevalues
sourcevalue: number[]
bufferVar: bufferVar

bufferVar.statuses
statusInformation: number[]

bufferVar.timestampresolution
resolution: number

bufferVar.timestamps
timestamp: number[]
bufferVar: bufferVar

channel.close()
channelList: string

channel.getclose()
closed: string
channelList: string

channel.getcommonside()
state: string
slot: string

channel.getcount()
counts: string
channelList: string

channel.getcountinterval()
update: channelgetcountintervalupdate

channel.getdelay()
delayTimes: string
channelList: string

channel.getdmm()
channelList: string
setting: functionAttributes | functions

channel.getlabel()
label: string
channelNumber: string

channel.getmatch()
matchValue: string
channelList: string

channel.getmatchtype()
matchType: string
channelList: string

channel.getmode()
mode: string
channelList: string

channel.getstate()
state: string
channelList: string
indicatorMask: channelgetstateindicatorMask

channel.gettype()
type: string
channelList: string

channel.getwidth()
width: string
channelNumber: string

channel.multiple.close()
channelList: string

channel.multiple.open()
channelList: string

channel.open()
channelList: string

channel.read()
value: string
channelList: string
readingBuffer: bufferVar
width: number

channel.setcommonside()
slot: string
state: channelsetcommonsidestate

channel.setcountinterval()
interval: channelsetcountintervalinterval

channel.setdelay()
channelList: string
delay: number

channel.setdmm()
channelList: string
setting: functionAttributes | functions
value: any

channel.setlabel()
channelNumber: string
labelname: string
channelList: string

channel.setmatch()
channelList: string
matchValue: number
mask: number

channel.setmatchtype()
channelList: string
type: channelMatchType

channel.setmode()
channelList: string
mode: channelsetmodemode

channel.setwidth()
channelNumber: string
width: number

channel.write()
channelList: string
value: number
width: number

createconfigscript() 
scriptName: string

dataqueue.add()
result: boolean
value: any
timeout: number

dataqueue.CAPACITY
count: dataqueueCAPACITYcount

dataqueue.clear()

dataqueue.count
count: number

dataqueue.next()
value: any
timeout: number

delay()
seconds: number

digio.line[N].mode
lineMode: digiolineArrmodelineMode
N: number

digio.line[N].state
N: number
state: digiolineArrstatestate

digio.readport()
data: number

digio.writeprotect
mask: number

errorqueue.count
count: integer

eventlog.count
N: integer

lan.linktimeout
timeout: number

lan.timedwait
timeout: number

localnode.autolinefreq
flag: boolean

localnode.description
description: string

serial.databits
bits: number

setup.poweron
id: integer

tsplink.writeprotect
mask: number

scriptVar.autorun
state: "yes"|"no"

scriptVar.source
code: string

scriptVar.name
scriptName: string

digio.trigger[N].mode
triggerMode: digioTriggerModes

digio.trigger[N].overrun
overrun: boolean

digio.trigger[N].pulsewidth
width: number

display.trigger.overrun
overrun: boolean

lan.config.gateway
gatewayAddress: string

lan.config.ipaddress
ipAddress: string

lan.config.speed
speed: number

lan.config.subnetmask
mask: string

lan.status.gateway
gatewayAddress: string


lan.status.ipaddress
ipAddress: string

lan.status.macaddress
macAddress: string

lan.status.speed
speed: number

lan.status.subnetmask
mask: string

lan.trigger[N].connected
connected:  boolean

lan.trigger[N].ipaddress
ipAddress: string

lan.trigger[N].mode
mode: lanTriggerMode

lan.trigger[N].overrun
overrun: boolean

smuX.cal.due
calDue: number

smuX.source.compliance
compliance: boolean

smuX.source.levelY
sourceLevel: number

smuX.source.lowrangeY
sourceRangeLow: number

smuX.source.offlimitY
sourceLimit: number

smuX.source.rangeY
rangeValue: number

smuX.source.limitY
limit: number

smuX.trigger.count
triggerCount: integer

tsplink.trigger[N].mode
mode: tsplinkTriggerModes

tsplink.trigger[N].overrun
overrun: boolean

tsplink.trigger[N].pulsewidth
width: number

trigger.timer[N].delaylist
intervals: table

trigger.timer[N].overrun
overrun: boolean

trigger.timer[N].passthrough
passthrough: boolean

lan.config.dns.domain
domain: string

lan.config.dns.hostname
hostName: string

lan.status.dns.name
hostName: string

lan.status.port.dst
port: integer

lan.status.port.rawsocket
port: integer

lan.status.port.telnet
port: integer

lan.status.port.vxi11
port: number

smuX.trigger.arm.count
triggerArmCount: integer


digio.writeport()
data: number

display.activebuffer
bufferName: bufferVar

display.changescreen()
screenName: displaychangescreenscreenName

display.delete()
promptID: any

display.input.number()
numberEntered: number
dialogTitle: string
numberFormat: displayinputnumbernumberFormat
defaultValue: number
minimumValue: number
maximumValue: number

display.input.option()
n: displayInputOption
dialogTitle: string
buttonTitle1: string
buttonTitle2: string
buttonTitleN: string

display.input.prompt()
buttonReturn: displayinputpromptbuttonReturn
buttonSet: displayinputpromptbuttonSet
dialogTitle: string

display.input.string()
textEntered: string|nil
dialogTitle: string
textFormat: displayinputstringtextFormat

display.lightstate
brightness: displaylightstatebrightness

display.prompt()
promptID: string
buttonID: displaypromptbuttonID
promptText: string
maximum: number
minimum: number
format: string
units: string
help: string
default: any

display.readingformat
format: displayreadingformatformat

display.settext()
DisplayText: dsiplayText
Text: string

display.waitevent()
objectID: number
subID: displaywaiteventsubID
timeout: number

display.watchchannels
channelList: string

dmm.digitize.analogtrigger.edge.level
value: number

dmm.digitize.analogtrigger.edge.slope
value: dmmdigitizeanalogtriggeredgeslopevalue


dmm.digitize.analogtrigger.mode
setting: dmmdigitizeanalogtriggermodesetting

dmm.digitize.analogtrigger.window.direction
value: dmmdigitizeanalogtriggerwindowdirectionvalue

dmm.digitize.analogtrigger.window.levelhigh
value: number

dmm.digitize.analogtrigger.window.levellow
value: number

dmm.digitize.aperture
value: number

dmm.digitize.count
value: number

dmm.digitize.dbreference
value: number

dmm.digitize.dbmreference
value: number

dmm.digitize.displaydigits
value: dmmdigitizedisplaydigitsvalue

dmm.digitize.func
value: dmmdigitizefunc

dmm.digitize.inputimpedance
setting: dmmdigitizeinputimpedancesetting

dmm.digitize.limit[Y].audible
value: dmmdigitizelimitArraudiblevalue

dmm.digitize.limit[Y].autoclear
state: dmmdigitizelimitArrautoclearstate

dmm.digitize.limit[Y].enable
state: dmmdigitizelimitArrenablestate


dmm.digitize.limit[Y].fail
value: dmmdigitizelimitArrfailvalue

dmm.digitize.limit[Y].high.value
highLimit: number

dmm.digitize.limit[Y].low.value
lowLimit: number

dmm.digitize.math.enable
value: dmmdigitizemathenablevalue

dmm.digitize.math.format
operation: dmmdigitizemathformatoperation

dmm.digitize.math.mxb.bfactor
offsetFactor: number

dmm.digitize.math.mxb.mfactor
scaleFactor: number

dmm.digitize.math.percent
value: number

dmm.digitize.range
value: number

dmm.digitize.read()
reading: number
bufferName: bufferVar

dmm.digitize.readwithtime()
reading: number
seconds: number
fractional: number
bufferName: bufferVar

dmm.digitize.rel.enable
state: dmmdigitizerelenablestate

dmm.digitize.rel.level
value: number

dmm.digitize.samplerate
readings: number

dmm.digitize.unit
value: dmmdigitizeunitvalue

dmm.digitize.userdelay[N]
delayTime: number

dmm.measure.analogtrigger.edge.level
value: number

dmm.measure.analogtrigger.edge.slope
value: dmmmeasureanalogtriggeredgeslopevalue

dmm.measure.analogtrigger.mode
setting: dmmmeasureanalogtriggermodesetting

dmm.measure.analogtrigger.window.direction
value: dmmmeasureanalogtriggerwindowdirectionvalue

dmm.measure.analogtrigger.window.levelhigh
value: number

dmm.measure.analogtrigger.window.levellow
value: number

dmm.measure.aperture
value: number

dmm.measure.autodelay
value: dmmmeasureautodelayvalue

dmm.measure.autozero.enable
state: dmmmeasureautozeroenablestate

dmm.measure.autorange
state: dmmmeasureautorangestate


dmm.measure.bias.level
value: number

dmm.measure.configlist.create()
listName: string

dmm.measure.configlist.delete()
listName: string
index: number

dmm.measure.configlist.query()
listName: string
index: number
fieldSeparator: string

dmm.measure.configlist.recall()
listName: string
index: number

dmm.measure.configlist.size()
indexCount: number
listName: string

dmm.measure.configlist.store()
listName: string
index: number

dmm.measure.count
count: number

dmm.measure.dbreference
value: number

dmm.measure.dbmreference
value: number

dmm.measure.detectorbandwidth
value: dmmmeasuredetectorbandwidthvalue

dmm.measure.displaydigits
value: dmmmeasuredisplaydigitsvalue

dmm.measure.filter.count
filterCount: number

dmm.measure.filter.enable
filterState: dmmmeasurefilterenablefilterState

dmm.measure.filter.type
type: dmmmeasurefiltertypetype

dmm.measure.filter.window
value: number

dmm.measure.fourrtd
RTDType: dmmmeasurefourrtdRTDType

dmm.measure.func 
mFunction: functions

dmm.measure.inputimpedance
setting: dmmmeasureinputimpedancesetting

dmm.measure.limit[Y].audible
state: dmmmeasurelimitArraudiblestate

dmm.measure.limit[Y].autoclear
value: dmmmeasurelimitArrautoclearvalue

dmm.measure.limit[Y].enable
state: dmmmeasurelimitArrenablestate

dmm.measure.limit[Y].fail
value: dmmmeasurelimitArrfailvalue

dmm.measure.limit[Y].high.value
highLimit: number

dmm.measure.limit[Y].low.value
lowLimit: number

dmm.measure.linesync
state: dmmmeasurelinesyncstate

dmm.measure.math.enable
value: dmmmeasuremathenablevalue

dmm.measure.math.format
operation: dmmmeasuremathformatoperation

dmm.measure.math.mxb.bfactor
offsetFactor: number

dmm.measure.math.mxb.mfactor
scaleFactor: number

dmm.measure.math.percent
reference: number

dmm.measure.nplc
nplc: number

dmm.measure.range
rangeValue: number

dmm.measure.read()
reading: number
bufferName: bufferVar

dmm.measure.readwithtime()
reading: number
seconds: number
fractional: number
bufferName: bufferVar

dmm.measure.refjunction
type: dmmmeasurerefjunctiontype

dmm.measure.rel.enable
state: dmmmeasurerelenablestate

dmm.measure.rel.level
value: number

dmm.measure.rel.method
value: dmmmeasurerelmethodvalue

dmm.measure.rtdalpha
value: number

dmm.measure.rtdbeta
value: number

dmm.measure.rtddelta
value: number

dmm.measure.rtdzero
value: number

dmm.measure.sense.autorange
setting: dmmmeasurerelenablestate

dmm.measure.sense.range
value: number

dmm.measure.simreftemperature
value: number

dmm.measure.thermistor
value: dmmmeasurethermistorvalue

dmm.measure.thermocouple
value: dmmmeasurethermocouplevalue

dmm.measure.threertd
value: dmmmeasurethreertdvalue

dmm.measure.threshold.autorange
state: dmmmeasurethresholdautorangestate

dmm.measure.threshold.range
range: number

dmm.measure.transducer
type: dmmmeasuretransducertype

dmm.measure.twortd
type: dmmmeasuretwortdtype

dmm.measure.unit
value: dmmmeasureunitvalue

dmm.measure.userdelay[N]
delayTime: number

dmm.terminals
terminals: dmmterminalsterminals

eventlog.getcount()
eventType: eventloggetcounteventType


eventlog.post()
message: string
eventType: eventlogposteventType

eventlog.save()
filename: string
eventType: eventlogsaveeventType

file.close()
fileNumber: file_object

file.flush()
fileNumber: file_object

file.mkdir()
path: string

file.open()
fileNumber: file_object
fileName: string
accessType: fileopenaccessType

file.read()
fileNumber: file_object
fileContents: string
readAction: filereadreadAction

file.usbdriveexists()
driveInserted: boolean

file.write()
fileNumber: file_object
string: string

format.asciiprecision
precision: number

format.byteorder
order: formatbyteorderorder

format.data
value: formatdatavalue

fs.chdir()
workingDirectory: string
path: string

fs.cwd()
path: string

fs.is_dir()
status: boolean
path: string

fs.is_file()
status: boolean
path: string

fs.mkdir()
path: string
newpath: string

fs.readdir()
files: string[]
path: string

fs.rmdir()
path: string

gpib.address
address: number

lan.ipconfig()
method: lanipconfigmethod
ipV4Address: string
subnetMask: string
gateway: string

lan.lxidomain
domain: number

lan.macaddress
MACaddress: string

localnode.revision
revision: string

localnode.showerrors
errorMode: 0|1

localnode.license
license_agreement: string

localnode.access
accessType: localnodeaccessaccessType

localnode.linefreq
frequency: number

localnode.model
model: string

localnode.password
password: string

localnode.prompts
prompting: localnodepromptsprompting

localnode.prompts4882
prompting: localnodeprompts4882prompting

localnode.serialno
serialno: string

localnode.settime()
year: number
month: number
day: number
hour: number
minute: number
second: number

localnode.showevents 
errorMode: localnodeshoweventserrorMode

localnode.version
version: string

node[N].execute()
scriptCode: string

node[N].getglobal()
value: any
name: string

node[N].setglobal()
name: string
value: number

print()
value1: any
...: any

printnumber()
value1: number
...: number


printbuffer()
startIndex: integer
endIndex: integer
bufferVar: bufferVar
...: bufferVar

scan.add()
channelList: string
configList: string
index: number
dmmConfig: string

scan.addsinglestep()
channelList: string
configList: string
index: number

scan.background()
scanCount: number
stepCount: number
reading: number
bufferVar: bufferVar

scan.addwrite()
channelList: string
writeValue: number

scan.alarmnotify
value: scanalarmnotifyvalue


scan.buffer
readingBuffer: bufferVar

scan.bypass
bypass: scanbypassbypass

scan.channel.stimulus
eventID: triggerEvents

scan.create()
channelList: string
configList: string
index: number
dmmConfig: string

scan.execute()
scanCount: number
stepCount: number
reading: number
bufferVar: bufferVar

scan.export()
filename: string
what: bufferFileSaveDetails

scan.learnlimits()
window: number
iterations: number

scan.list()
scanList: string

scan.measure.interval
time: number

scan.measure.stimulus
eventID: triggerEvents

scan.monitor.channel
value: string

scan.monitor.limit.high.value
value: number

scan.monitor.limit.low.value
value: number

scan.scancount
scanCount: number

scan.scaninterval
scanInterval: number

scan.state()
scanCount: number
stepCount: number
reading: number

scan.addimagestep()
channelList: string
dmmConfig: string

scan.start.stimulus
eventID: triggerEvents

serial.baud
baud: number

scan.stepcount
scanStepCount: number

script.anonymous
scriptVar: table

script.delete()
scriptName: string

script.load()
file: string
scriptVar: scriptVar
name: string

 script.new()
 code: string
 name: string
 scriptVar: scriptVar

 script.restore()
 name: string

 script.newautorun()
  code: string
 name: string
 scriptVar: scriptVar

 setup.save()
 id: string

 setup.cards()
 CardModel: string

 setup.recall()
 id: number

 scriptVar.save()
 filename: string

 os.time()
 utcTime: number
 timespec: table

 channel.calibration.adjustcount()
 count: number

 channel.calibration.adjustdate()
 returnDate: any
 date: any

 channel.calibration.unlock()
 password: string

 channel.calibration.verifydate()
 returnDate: any
 date: any

 channel.calibration.password()
 password: string

digio.trigger[N].wait()
triggered: boolean
timeout: number

display.loadmenu.delete()
displayName: string

display.loadmenu.add()
memory: displayloadmenuaddmemory
displayName: string
code: string

lan.trigger[N].wait()
triggered: boolean
timeout: number

timer.measure.t()
time: number

tsplink.trigger[N].wait()
triggered: boolean
timeout: number

trigger.blender[N].wait()
triggered: boolean
timeout: number

channel.pattern.delete()
name: string

channel.pattern.getimage()
channelList: string
name: string

channel.pattern.setimage()
channelList: string
name: string

channel.pattern.snapshot()
name: string

channel.trigger[N].get()
channelList: string
stateMatch: number

channel.trigger[N].set
channelList: string
stateMatch: number

channel.trigger[N].wait
triggered: boolean
timeout: number

dmm.calibration.unlock()
password: string

dmm.configure.delete()
name: string

dmm.configure.query()
config: string
userConfiguration: string
userSeparator: string

dmm.configure.recall()
configuration: string

dmm.configure.set()
name: string

dmm.rel.acquire()
relativeValue: number

settime()
time: any

tsplink.readbit()
data: number
N: number

tsplink.reset()
nodesFound: number
expectedNodes: number

tsplink.writebit()
N: number
data: boolean

dmm.appendbuffer()
bufferVar: string
fileName: string

dmm.close()
channelList: string

dmm.getconfig()
channelList: string
DMMconfiguration: string

dmm.makebuffer()
bufferSize: number

dmm.measure()
bufferVar: bufferVar
reading: number

dmm.measurewithtime()
reading: number
sconds: number
fractional: number
bufferVar: bufferVar

scan.nobufferbackground()
scancount: number
stepcount: number

scan.nobufferbackground()
scancount: number
stepcount: number

slot[slot].amps.endchannel
value: number
slot: number

slot[slot].amps.startchannel
value: number
slot: number

slot[slot].analogoutput.endchannel
value: number
slot: number

slot[slot].analogoutput.startchannel
value: number
slot: number


slot[slot].commonsideohms
slot: number
commonside: 1|nil

slot[slot].digitalio.endchannel
value: number
slot: number

slot[slot].digitalio.startchannel
value: number
slot: number

slot[slot].idn
idnString: string
slot: 1|2

slot[slot].isolated.endchannel
value: number
slot: number

slot[slot].isolated.startchannel
value: number
slot: number

slot[slot].matrix.columns
value: number
slot: number

slot[slot].matrix.rows
value: number
slot: number

slot[slot].maxvoltage
maximumVolts: number
slot: number

slot[slot].pseudocard
pseudoCard: number
slot: number

slot[X].pseudocard

slot[slot].tempsensor
value: 1|nil
slot: number

slot[slot].totalizer.endchannel
value: number
slot: number

slot[slot].totalizer.startchannel
value: number
slot: number

slot[slot].voltage.endchannel
value: number
slot: number

slot[slot].voltage.startchannel
value: number
slot: number

status.node_enable
nodeEnableRegister: number

status.node_event
nodeEventRegister: number

status.request_enable
requestSRQEnableRegister: number

status.request_event
requestSRQEventRegister: number

lan.trigger[N].pseudostate
pseudostate: 0|1


status.condition
statusByte: number

status.operation.condition
operationRegister: number

status.operation.enable
operationRegister: number

status.operation.event
operationRegister: number

status.operation.getmap()
setEvent: number
clearEvent: number
bitNumber: number

status.operation.setmap()
setEvent: number
clearEvent: number
bitNumber: number

status.questionable.condition
questionableRegister: number

status.questionable.enable
questionableRegister: number

status.questionable.event
questionableRegister: number

status.questionable.getmap()
setEvent: number
clearEvent: number
bitNumber: number

status.questionable.setmap()
setEvent: number
clearEvent: number
bitNumber: number

status.standard.enable
standardRegister: number

status.standard.event
standardRegister: number

timer.gettime()
time: number

trigger.blender[N].orenable
orenable: boolean

trigger.blender[N].overrun
overrun: boolean

trigger.blender[N].stimulus[M]
event: triggerEvents

trigger.blender[N].wait()
triggered: boolean

trigger.digin[N].overrun
overrun: boolean

trigger.digin[N].wait()
triggered: boolean
timeout: number

trigger.digout[N].pulsewidth
width: number

trigger.digout[N].stimulus
event: triggerEvents

trigger.extin.overrun
overrun: boolean

trigger.extin.wait()
triggered: number
timeout: number


trigger.extout.stimulus
event: triggerEvents

trigger.lanin[N].edge
edgeMode: triggerMode

trigger.lanin[N].overrun
overrun: boolean

trigger.lanin[N].wait()
triggered: boolean
timeout: number

trigger.lanout[N].connected
connected: boolean

trigger.lanout[N].ipaddress
ipAddress: string

trigger.lanout[N].stimulus
LANevent: triggerEvents

trigger.model.getbranchcount()
blockNumber: number

trigger.model.load() - ConfigList
ConfigList: loadFunConstParam
measureConfigList: string
delay: number
bufferName: bufferVar
sourceConfigList: string

trigger.model.load() - Empty
Empty: loadFunConstParam

trigger.model.load() - DurationLoop
DurationLoop: loadFunConstParam
duration: number
delay: number
bufferName: bufferVar

trigger.model.load() - GradeBinning
GradeBinning: loadFunConstParam
components: number
startInLine: number
startDelay: number
endDelay: number
limitxHigh: number
limitxLow: number
limit1Pattern: number
limit2Pattern: number
limit3Pattern: number
limit4Pattern: number
allPattern: number
bufferName: bufferVar

trigger.model.load() - LogicTrigger
LogicTrigger: loadFunConstParam
digInLine: number
digOutLine: number
count: number
clear: number
delay: number
bufferName: bufferVar

trigger.model.load() - LoopUntilEvent
LoopUntilEvent: loadFunConstParam
triggerEvent: triggerEventsForFunctionParam
position: number
clear: number
delay: number
bufferName: bufferVar

trigger.model.load() - SimpleLoop
SimpleLoop: loadFunConstParam
count: number
delay: number
bufferName: bufferVar

trigger.model.load() - SortBinning
SortBinning: loadFunConstParam
components: number
startInLine: number
startDelay: number
endDelay: number
limitxHigh: number
limitxLow: number
limit1Pattern: number
limit2Pattern: number
limit3Pattern: number
limit4Pattern: number
allPattern: number
bufferName: bufferVar


trigger.model.setblock() - trigger.BLOCK_BRANCH_ALWAYS
BLOCK_BRANCH_ALWAYS: triggerBlockBranch
blockNumber: number
branchToBlock: number

trigger.model.setblock() - trigger.BLOCK_BRANCH_COUNTER
BLOCK_BRANCH_COUNTER: triggerBlockBranch
blockNumber: number
branchToBlock: number
targetCount: number

trigger.model.setblock() - trigger.BLOCK_BRANCH_DELTA
BLOCK_BRANCH_DELTA: triggerBlockBranch
blockNumber: number
targetDifference: number
branchToBlock: number
measureBlock: number

trigger.model.setblock() - trigger.BLOCK_BRANCH_LIMIT_CONSTANT
BLOCK_BRANCH_LIMIT_CONSTANT: triggerBlockBranch
blockNumber: number
branchToBlock: number
measureBlock: number

trigger.model.setblock() - trigger.BLOCK_BRANCH_LIMIT_DYNAMIC
BLOCK_BRANCH_LIMIT_DYNAMIC: triggerBlockBranch
blockNumber: number
branchToBlock: number
measureBlock: number
limitNumber: 1|2

trigger.model.setblock() - trigger.BLOCK_BRANCH_ON_EVENT
BLOCK_BRANCH_ON_EVENT: triggerBlockBranch
blockNumber: number
branchToBlock: number
event: triggerEventsForFunctionParam

trigger.model.setblock() - trigger.BLOCK_BRANCH_ONCE
BLOCK_BRANCH_ONCE: triggerBlockBranch
blockNumber: number
branchToBlock: number

trigger.model.setblock() - trigger.BLOCK_BRANCH_ONCE_EXCLUDED
BLOCK_BRANCH_ONCE_EXCLUDED: triggerBlockBranch
blockNumber: number
branchToBlock: number

trigger.model.setblock() - trigger.BLOCK_BUFFER_CLEAR
BLOCK_BUFFER_CLEAR: triggerBlockBranch
blockNumber: number
bufferName: bufferVar

trigger.model.setblock() - trigger.BLOCK_CONFIG_NEXT
BLOCK_CONFIG_NEXT: triggerBlockBranch
blockNumber: number
configurationList: string
optionalConfigList: string

trigger.model.setblock() - trigger.BLOCK_CONFIG_PREV
BLOCK_CONFIG_PREV: triggerBlockBranch
blockNumber: number
configurationList: string
optionalConfigList: string

trigger.model.setblock() - trigger.BLOCK_CONFIG_RECALL
BLOCK_CONFIG_RECALL: triggerBlockBranch
blockNumber: number
configurationList: string
index: number
optionalConfigList: string

trigger.model.setblock() - trigger.BLOCK_DELAY_CONSTANT
BLOCK_DELAY_CONSTANT: triggerBlockBranch
blockNumber: number
time: number

trigger.model.setblock() - trigger.BLOCK_DELAY_DYNAMIC
BLOCK_DELAY_DYNAMIC: triggerBlockBranch
blockNumber: number
USER_DELAY_Mn: triggerUserDelay

trigger.model.setblock() - trigger.BLOCK_DIGITAL_IO
BLOCK_DIGITAL_IO: triggerBlockBranch
blockNumber: number
bitPattern: number
bitMask: number

trigger.model.setblock() - trigger.BLOCK_LOG_EVENT
BLOCK_LOG_EVENT: triggerBlockBranch
blockNumber: number
message: string

trigger.model.setblock() - trigger.BLOCK_MEASURE_DIGITIZE
BLOCK_MEASURE_DIGITIZE: triggerBlockBranch
blockNumber: number
bufferName: bufferVar

trigger.model.setblock() - trigger.BLOCK_NOP
BLOCK_NOP: triggerBlockBranch
blockNumber: number

trigger.model.setblock() - trigger.BLOCK_NOTIFY
BLOCK_NOTIFY: triggerBlockBranch
blockNumber: number
EVENT_NOTIFYN: triggerEventNotify

trigger.model.setblock() - trigger.BLOCK_RESET_BRANCH_COUNT
BLOCK_RESET_BRANCH_COUNT: triggerBlockBranch
blockNumber: number
counter: number

trigger.model.setblock() - trigger.BLOCK_WAIT
BLOCK_WAIT: triggerBlockBranch
blockNumber: number
event: triggerEventsForFunctionParam

trigger.timer[N].count
count: number

trigger.timer[N].delay
interval: number

trigger.timer[N].start.fractionalseconds
time: number

trigger.timer[N].start.overrun
state: boolean

trigger.timer[N].start.seconds
time: number

trigger.timer[N].start.stimulus
event: triggerEvents

trigger.timer[N].wait()
triggered: boolean
timeout: number

trigger.tsplinkin[N].overrun
overrun: boolean

trigger.tsplinkin[N].wait()
triggered: boolean
timeout: number

trigger.tsplinkout[N].pulsewidth
width: number

trigger.tsplinkout[N].stimulus
event: triggerEvents

trigger.wait()
triggered: boolean
timeout: number

tsplink.group
groupNumber: number

tsplink.line[N].mode
mode: tsplinkLineMode 

tsplink.master
masterNodeNumber: number

tsplink.node
nodeNumber: number

tsplink.readport()
data: number

tsplink.state
state: string

tsplink.writeport()
data: number

tspnet.connect()
connectionID: tspnetConnectionID
ipAddress: string
portNumber: number
initString: string

tspnet.clear()
connectionID: tspnetConnectionID

tspnet.disconnect()
connectionID: tspnetConnectionID

tspnet.execute()
connectionID: tspnetConnectionID
commandString: string
formatString: string
...: number|string|...

tspnet.idn()
idnString: string
connectionID: tspnetConnectionID

tspnet.read()
connectionID: tspnetConnectionID
commandString: string
formatString: string
...: number|string|...

tspnet.readavailable()
bytesAvailable: number
connectionID: tspnetConnectionID

tspnet.termination()
connectionID:tspnetConnectionID
termSequence: tspnetterminationtermSquence
type: tspnetterminationtype

tspnet.timeout
value: number

tspnet.tsp.abort()
connectionID: tspnetConnectionID

tspnet.tsp.abortonconnect
value: boolean

tspnet.tsp.rbtablecopy()
table: table
connectionID: tspnetConnectionID
name: string
startIndex: number
endIndex: number

tspnet.tsp.runscript()
connectionID: tspnetConnectionID
name: string
script: string

tspnet.write()
connectionID: tspnetConnectionID
inputString: string

userstring.add()
name: string
value: string

userstring.delete()
name: string

userstring.get()
name: string
value: string

waitcomplete()
group: any

smu.measure.configlist.create()
listName: string

smu.measure.configlist.delete()
listName: string
index: number

smu.measure.configlist.query()
listName: string
index: number
fieldSeparator: string

smu.measure.configlist.recall()
listName: string
index: number
sourceListName: string
sourceListName: number
sourceIndex: number

smu.measure.configlist.size()
indexCount: number
listName: string

smu.measure.configlist.store()
listName: string
index: number

smu.measure.read()
reading: number[]
bufferName: bufferVar

smu.measure.readwithtime()
reading: number[]
seconds: number
fractional: number
bufferName: bufferVar

smu.measure.rel.acquire()
relativeValue: number

smu.source.configlist.create()
listName: string

smu.source.configlist.delete()
listName: string
index: number

smu.source.configlist.query()
listName: string
index: number
fieldSeparator: string

smu.source.configlist.recall()
listName: string
index: number
measureListName: string
measureIndex: number

smu.source.configlist.size()
listName: string
indexCount: number

smu.source.configlist.store()
listName: string
index: number

smu.source.configlist.storefunc()
listName: string
index: number
ConfigListName: string

smu.source.sweeplinear()
configListName: string
start: number
stop: number
points: number
sDelay: number
count: smusourcesweeplinearcount | number
rangeType: smusourcesweeplinearrangeType
failAbort: smusourcesweeplinearfailAbort
dual: smusourcesweeplinear
bufferName: bufferVar

smu.source.sweeplinearstep()
configListName: string
start: number
stop: number
step: number
sDelay: number
count: smusourcesweeplinearstepcount | number
rangeType: smusourcesweeplinearsteprangeType
failAbort: smusourcesweeplinearstepfailAbort
dual: smusourcesweeplinearstepdual
bufferName: bufferVar

smu.source.sweeplist()
configListName: string
index: number
sDelay: number
count: smusourcesweeplistcount | number
failAbort: smusourcesweeplistfailAbort
bufferName: bufferVar

smu.source.sweeplog()
configListName: string
start: number
stop: number
points: number
sDelay: number
count: smusourcesweeplogcount | number
rangeType: smusourcesweeplograngeType
failAbort: smusourcesweeplogfailAbort
dual: smusourcesweeplogdual
bufferName: bufferVar
asymptote: number

node[N].getglobal()
value: number
name: string

smu.digitize.read()
reading: number
bufferName: bufferVar

smu.digitize.readwithtime()
reading: number
seconds: number
fractional: number
bufferName: bufferVar

smu.source.pulsesweeplinear()
configListName: string
biasLevel: number
start: number
stop: number
points: number
pulseWidth: number
measEnable: smusourcepulsesweeplinearmeasEnable
bufferName: bufferVar
sDelay: number
offTime: number
count: smusourcepulsesweeplinearcount | number
xBiasLimit: number
xPulseLimit: number
failAbort: smusourcepulsesweeplinearfailAbort
dual: smusourcepulsesweeplineardual

smu.source.pulsesweeplinearstep()
configListName: string
biasLevel: number
start: number
stop: number
step: number
pulseWidth: number
measEnable: smusourcepulsesweeplinearstepmeasEnable
bufferName: bufferVar
sDelay: number
offTime: number
count: smusourcepulsesweeplinearstepcount | number
xBiasLimit: number
xPulseLimit: number
failAbort: smusourcepulsesweeplinearstepfailAbort
dual: smusourcepulsesweeplinearstepdual

smu.source.pulsesweeplist()
configListName: string
pulseWidth: number
measEnable: smusourcepulsesweeplistmeasEnable
bufferName: bufferVar
count: smusourcepulsesweeplistcount | number
offTime: number
sDelay: number
failAbort: smusourcepulsesweeplistfailAbort

smu.source.pulsesweeplog()
configListName: string
biasLevel: number
start: number
stop: number
points: number
pulseWidth: number
measEnable: smusourcepulsesweeplogmeasEnable
bufferName: bufferVar
sDelay: number
offTime: number
count: smusourcepulsesweeplogcount | number
xBiasLimit: number
xPulseLimit: number
failAbort: smusourcepulsesweeplogfailAbort
dual: smusourcepulsesweeplogdual
asymptote: number

smu.source.pulsetrain()
configListName: string
biasLevel: number
pulseLevel: number
pulseWidth: number
count: smusourcepulstraincount | number
measEnable: smusourcepulsetrainmeasEnable
bufferName: bufferVar
sDelay: number
offTime: number
xBiasLimit: number
xPulseLimit: number
failAbort: smusourcepulsetrainfailAbort

reset()
system: boolean

channelpowerstate()
channelList: string
state: channelsetpowerstatestate

channel.getbackplane()
analogBusList: string
channelList: string

channel.getoutputenable()
outputEnable: boolean
channelList: string

channel.getpole()
poles: string 
channelList: string 

channel.getpowerstate()
states: string
channelList: string

channel.resetstatelatch()
states: string
channelList: string

channel.setbackplane()
abuslist: string
channelList: string

channel.setoutputenable()
channelList: string
state: channelState

channel.setpole()
channelList: string
value: channelsetpolevalue

channel.setstatelatch()
channelList: string
stateLatchMask: channelsetstatelatchstateLatchMask

channel.getstatelatch()
channelList: string
state: channelsetstatelatchstateLatchMask

channel.createspecifier()
bank: number
row: number
column: number
slotX: number

channel.reset()
channelList: string

channel.setforbidden()
channelList: string

channel.getforbidden()
channelList: string
forbiddenList: string

channel.clearforbidden()
channelList: string

channel.exclusiveclose()
channelList: string

channel.exclusiveslotclose()
channelList: string

channel.getimage()
channels: string
channelList: string

channel.getlabel
channelList: string
label: string

bit.bitand()
result: number
value1: number
value2: number

bit.bitor()
result: number
value1: number
value2: number

bit.bitxor()
result: number
value1: number
value2: number

bit.clear()
result: number
value: number
index: number

bit.get()
result: number
value: number
index: number

bit.getfield()
result: number
value: number
index: number
width: number

bit.set()
result: number
value: number
index: number

bit.setfield()
result: number
value: number
index: number
width: number
fieldValue: number

bit.test()
result: number
value: number
index: number

bit.toggle()
result: number
value: number
index: number

digio.readbit()
data: number
N: number

digio.writebit()
data: number
N: number

digio.writeport()
data: number

display.getcursor()
row: number
column: number
style: boolean

display.gettext()
columnStart: number
columnEnd: number
row: number
embellished: boolean
text: string

display.inputvalue()
format: string
default: number
minimum: number
maximum: number

display.menu()
selection: string 
name: string
items: string

display.setcursor()
row: number
column: number
style: boolean

display.getannunciators()
annunciators: displayGetAnnuciators

display.getlastk
keyCode: displayKeyCode

display.sendkey()
keyCode: displayKeyCode

display.waitkey()
keyCode: displayKeyCode

errorqueue.next()
errorCode: number
message: string
severity: string
errorNode: string

eventlog.all()
logString: string

eventlog.next()
logString: string

fileVar:read()
data1: number
data2: number
format1: string
format2: string

fileVar:seek()
position: string
errorMsg: string
whence: string
offset: number

fileVar:write()
data1: string
data2: string

gettimezone()
timeZone: any

settimezone()
offset: string
dstOffset: string
dstStart: string
dstEnd: string

makegetter()
table: any
attributeName: string
getter: getter_object

makesetter()
setter: setter_object
table: any
attributeName: string

channel.setpowerstate()
channelList: string

channel.calibration.step()
channel: any
step: number
value: number

dmm.calibration.ac()
step: number
value: number

dmm.calibration.dc()
step: number
value: number

io.close()
file: file_object

io.open()
fileVar: file_object
path: string
mode: string
errorMsg: string

io.output()
newfile: string
fileVar: file_object

io.read()
data1: number
data2: number
format1: string
format2: string

io.type()
type: string
obj: file_object

io.write()
data1: number
data2: number

io.input()
fileVar: file_object
newfile: string

memory.available()
memoryAvailable: string

memory.used()
memoryUsed: string

beeper.beep()
duration: number
frequency: number

bit.bitand()
result: number
value1: number
value2: number

bit.bitor()
result: number
value1: number
value2: number

bit.bitxor()
result: number
value1: number
value2: number


bit.clear()
result: number
value: number
index: number

bit.get()
result: number
value: number
index: number

bit.getfield()

result: number
value: number
index: number
width: number

bit.set()
result: number
value: number
index: number

bit.setfield()
result: number
value: number
index: number
width: number
fieldValue: number

bit.test()
result: boolean
value: number
index: number

bit.toggle()
result: number
value: number
index: number

ConfigPulseIMeasureV()
f: boolean
msg: string
smu: table
bias: number
level: number
limit: number
ton: number
toff: number
points: number
buffer: bufferVar
tag: number
sync_out: number
start: number
stop: number
sync_in: number
sync_in_timeout: number
sync_in_abort: number

ConfigPulseIMeasureVSweepLin()
f: boolean
msg: string
smu: table
bias: number
level: number
limit: number
ton: number
toff: number
points: number
buffer: bufferVar
tag: number
sync_out: number
start: number
stop: number
sync_in: number
sync_in_timeout: number
sync_in_abort: number

ConfigPulseIMeasureVSweepLog()
f: boolean
msg: string
start: number
smu: table
bias: number
level: number
limit: number
ton: number
toff: number
points: number
buffer: bufferVar
tag: number
sync_out: number
start: number
stop: number
sync_in: number
sync_in_timeout: number
sync_in_abort: number

ConfigPulseVMeasureI()
f: boolean
msg: string
smu: table
bias: number
level: number
limit: number
ton: number
toff: number
points: number
buffer: table
tag: number
sync_in: number
sync_out: number
start: number
stop: number
sync_in_timeout: number
sync_in_abort: number

ConfigPulseVMeasureISweepLin()
f: boolean
msg: string
smu: table
bias: number
level: number
limit: number
ton: number
toff: number
points: number
buffer: table
tag: number
sync_out: number
start: number
stop: number
sync_in: number
sync_in_timeout: number
sync_in_abort: number

ConfigPulseVMeasureISweepLog()
f: boolean
msg: string
smu: table
bias: number
level: number
limit: number
ton: number
toff: number
points: number
buffer: table
tag: number
sync_out: number
start: number
stop: number
sync_in: number
sync_in_timeout: number
sync_in_abort: number

dataqueue.add()
result: boolean
value: any
timeout: number

delay()
seconds: number


digio.readbit()
N: number
data: number

digio.readport()
data: number

digio.trigger[N].assert()
N: number

digio.trigger[N].clear()
N: number

digio.trigger[N].release()
N: number

digio.trigger[N].reset()
N: number

digio.writebit()
N: number
data: number

digio.writeport()
data: number

display.getannunciators()
annunciators: number

display.getcursor()
row: number
column: number
style: number

display.getlastkey()
keyCode: number

display.gettext()
text: string
embellished: boolean
row: number
columnStart: number
columnEnd: number

display.inputvalue()
format: string
default: number
minimum: number
maximum: number

display.loadmenu.add()
displayName: string
code: string
memory: display

display.loadmenu.catalog()
displayName: String
code: string
body: string

display.loadmenu.delete()
displayName: string

display.menu()
selection: string
name: string
items: string

display.prompt()
format: string
units: string
help: string
default: number
minimum: number
maximum: number

display.sendkey()
keyCode: number

display.setcursor()
row: number
column: number
style: number

display.settext()
text: string

display.trigger.wait()
triggered: boolean
timeout: number

display.waitkey()
keyCode: number

errorqueue.next():
errorCode: number
message: string
severity: number
errorNode: number

eventlog.all()
logString: string|nil

fs.chdir()
workingDirectory: string
path: string

fs.cwd()
path: string

fs.is_dir()
status: boolean
path: string

fs.is_file()
status: boolean
path: string

fs.mkdir()
path: string
newpath: string

fs.rmdir()
path: string

gettimezone()
timeZone: string

gm_isweep()
gm_array: any
vbuf: number
ibuf: number
smu: table
start_i: number
stop_i: number
points: number

gm_vsweep():
gm_array: any
vbuf: number
ibuf: number
smu: table
start_i: number
stop_i: number
points: number

i_leakage_measure()
imeas: number
smu: table
levelv: number
limiti: number
sourcedelay: number
measurei: number
measuredelay: number

i_leakage_threshold()
f: boolean
smu: table
levelv: number
limiti: number
sourcedelay: number
measurei: number
measuredelay: number
threshold: number
timeout: number

InitiatePulseTest()
f: boolean
msg: string
tag: number

InitiatePulseTestDual()
f: boolean
msg: string
tag1: number
tag2: number

io.close()
file: string

io.input()
fileVar: io_object
newfile: string

io.open()
fileVar: io_object
errorMsg: string|nil
path: string
mode: string

io.output()
fileVar: io_object
newfile: string

io.read()
data1: any
data2: any
dataN: any
format1: string
format2: string
formatN: string

io.write()
data1: string|number
data2: string|number
dataN: string|number
...: string|number

makegetter()
getter: function
table: table
attributeName: string

makesetter()
setter: function
table: table
attributeName: string

meminfo()
freeMem: number
totalMem: number

node[N].execute()
N: number
scriptCode: string

node[N].getglobal()
value: any
N: number
name: string

node[N].setglobal()
N: number
name: string
value: number

os.remove()
success: boolean|nil
msg: string|nil
filename: string

os.rename()
success: boolean|nil
msg: string
oldname: string
newname: string


PulseIMeasureV()
smu: table
bias: number
level: number
ton: number
toff: number
points: number

PulseVMeasureI()
smu: table
bias: number
level: number
ton: number
toff: number
points: number

QueryPulseConfig()
tag: number
tb1: any

reset()
system: boolean

savebuffer()
buffer: bufferVar
formatType: string
fileName: string

script.delete()
scriptName: string

script.factory.catalog()
name: string
body: string

script.load()
scriptVar: scriptVar
file: string
name: string

script.new()
scriptVar: scriptVar
code: string
name: string

script.newautorun()
scriptVar: scriptVar
code: string
name: string

script.restore()
name: string

script.user.catalog()
name: string
body: string

serial.read()
maxchars: number
data: string

serial.write()
data: string

settime()
time: number

settimezone()
offset: string
dstOffset: string
dstStart: string
dstEnd: string

setup.recall()
id: number|string

setup.save()
id: number|string

smuX.buffer.getstats()
statistics: statsVar
bufferVar: bufferVar

smuX.buffer.recalculatestats()
bufferVar: bufferVar

smuX.cal.adjustdate
adjustDate: number

smuX.cal.date
calDate: number

smua.cal.due
calDue: number

smuX.cal.unlock()
password: string

smuX.contact.calibratehi()
cp1Measured: number
cp1Reference: number
cp2Measured: number
cp2Reference: number

smuX.contact.calibratelo()
cp1Measured: number
cp1Reference: number
cp2Measured: number
cp2Reference: number

smuX.contact.check()
result: boolean

smuX.contact.r()
rhi: number
rlo: number

smuX.makebuffer()
bufferVar: bufferVar
bufferSize: integer

smuX.nvbufferY
bufferVar: bufferVar

smuX.measure.calibrateY()
range: number
cp1Measured: number
cp1Reference: number
cp2Measured: number
cp2Reference: number

smuX.measure.count
count: integer

smuX.measure.delayfactor
delayFactor: number

smuX.measure.filter.count
filterCount: integer

smuX.measure.highcrangedelayfactor
delayFactor: integer

smuX.measure.interval
interval: number

smuX.measure.lowrangeY
lowRange: number

smuX.measure.nplc
nplc: number

smuX.measure.overlappedY()
rbuffer: bufferVar
ibuffer: bufferVar
vbuffer: bufferVar

smuX.measure.rangeY
rangeValue: number

smuX.measure.rel.levelY
relValue: number



smuX.measure.Y()
reading: number
readingBuffer: bufferVar
iReading: number
vReading: number
iReadingBuffer: bufferVar
vReadingBuffer: bufferVar

eventlog.suppress()
eventNumber: number

smuX.measureYandstep()
reading: number
sourceValue: number
iReading: number
vReading: number

smuX.source.calibrateY()
range: number
cp1Expected: number
cp1Reference: number
cp2Expected: number
cp2Reference: number

smuX.savebuffer()
buffer: bufferVar

smuX.trigger.measure.Y()
rbuffer: bufferVar
ibuffer: bufferVar
vbuffer: bufferVar

smuX.trigger.source.linearY()
startValue: number
endValue: number
points: number

smuX.trigger.source.listY()
sweepList: table

smuX.trigger.source.logY()
startValue: number
endValue: number
points: number
asymptote: number

SweepILinMeasureV()
smu: table
starti: number
stopi: number
stime: number
points: number

SweepIListMeasureV()
smu: table
ilist: table
stime: number
points: number

SweepILogMeasureV()
smu: table
starti: number
stopi: number
stime: number
points: number

SweepVLinMeasureI()
smu: table
startv: number
stopv: number
stime: number
points: number

SweepVListMeasureI()
smu: table
vlist: table
stime: number
points: number

SweepVLogMeasureI()
smu: table
startv: number
stopv: number
stime: number
points: number

timer.measure.t()
time: number

trigger.blender[N].wait()
triggered: boolean
timeout: number

trigger.timer[N].wait()
triggered: boolean
timeout: number

trigger.wait()
triggered: boolean
timeout: number

tsplink.readbit()
data: 0|1
N: number

tsplink.readport()
data: number

tsplink.reset()
nodesFound: number
expectedNodes: number

tsplink.trigger[N].wait()
triggered: boolean
timeout: number

tsplink.writebit()
data: number
N: number

tsplink.writeport()
data: number

userstring.add()
name: string
value: string

userstring.catalog()
name: stirng
body: string

userstring.delete()
name: string

userstring.get()
name: string
value: number

waitcomplete()
group: any
beeper.enable
state: beeperenablestate

display.locallockout
lockout: displaylocallockoutlockout

display.numpad
numericKeypad: displaynumpadnumericKeypad

display.smuX.digits
digits: displaysmuXdigitsdigits

display.smuX.measure.func
func: displaysmuXmeasurefuncfunc

display.screen
displayID: displayscreendisplayID

eventlog.overwritemethod
method: eventlogoverwritemethodmethod

eventlog.enable
status: eventlogenablestatus

lan.autoconnect
state: lanautoconnectstate

lan.nagle
state: lannaglestate

lan.config.dns.dynamic
state: lanconfigdnsdynamicstate

lan.config.dns.verify
state: lanconfigdnsverifystate

lan.config.duplex
duplex: lanconfigduplexduplex

lan.config.method
method: lanconfigmethodmethod

lan.status.duplex
duplex: lanstatusduplexduplex

lan.trigger[N].protocol
protocol: lantriggerprotocolprotocol

localnode.passwordmode
mode: localnodepasswordmodemode

serial.flowcontrol
flow: serialflowcontrolflow

serial.parity
parity: serialparityparity

smuX.cal.restore()
calset: smuXcalrestorecalset

smuX.cal.polarity
calPolarity: smuXcalpolaritycalPolarity

smuX.cal.state
calState: smuXcalstatecalState

smuX.contact.speed
speedSetting: smuXcontactspeedspeedSetting

smuX.contact.threshold
rValue: number

smuX.measure.analogfilter
option: 0|1

smuX.measure.autorangeY
autoRange: smuXmeasureautorangeYautoRange

smuX.measure.autozero
azMode: smuXmeasureautozeroazMode

smuX.measure.delay
mDelay: smuXmeasuredelaymDelay

smuX.measure.filter.enable
filterState: smuXmeasurefilterenablefilterState

smuX.measure.filter.type
filterType: smuXmeasurefiltertypefilterType

smuX.measure.rel.enableY
relEnable: smuXmeasurerelenableYrelEnable

smuX.sense
senseMode: smuXsensesenseMode

smuX.source.autorangeY
sourceAutorange: smuXsourceautorangeYsourceAutorange

smuX.source.delay
sDelay: smuXsourcedelaysDelay

smuX.source.func
sFunction: smuXsourcefuncsFunction

smuX.source.highc
highC: smuXsourcehighchighC

smuX.source.offmode
sourceOffMode: smuXsourceoffmodesourceOffMode

smuX.source.output
sourceOutput: smuXsourceoutputsourceOutput

smuX.source.outputenableaction
sourceOutput: smuXsourceoutputsourceOutput
outputAction: smuXsourceoutputenableactionoutputAction

smuX.source.settling
settleOption: smuXsourcesettlingsettleOption

smuX.source.sink
sinkMode: smuXsourcesinksinkMode

smuX.trigger.ARMED_EVENT_ID
X: smuXtriggerARMED_EVENT_IDX

smuX.trigger.autoclear
autoClear: smuXtriggerautoclearautoClear

smuX.trigger.endpulse.action
pulseAction: smuXtriggerendpulseactionpulseAction

smuX.trigger.endsweep.action
action: smuXtriggerendsweepactionaction

smuX.trigger.IDLE_EVENT_ID
X: smuXtriggerIDLE_EVENT_IDX

smuX.trigger.measure.action
action: smuXtriggermeasureactionaction

smuX.trigger.MEASURE_COMPLETE_EVENT_ID
X: smuXtriggerMEASURE_COMPLETE_EVENT_IDX

smuX.trigger.PULSE_COMPLETE_EVENT_ID
X: smuXtriggerPULSE_COMPLETE_EVENT_IDX

smuX.trigger.SOURCE_COMPLETE_EVENT_ID
X: smuXtriggerSOURCE_COMPLETE_EVENT_IDX

smuX.trigger.SWEEP_COMPLETE_EVENT_ID
X: smuXtriggerSWEEP_COMPLETE_EVENT_IDX

smuX.trigger.SWEEPING_EVENT_ID
X: smuXtriggerSWEEPING_EVENT_IDX

smuX.trigger.source.action
action: smuXtriggersourceactionaction

smuX.trigger.source.limitY
sweepSourceLimit: smuXtriggersourcelimitYsweepSourceLimit

smuX.source.offfunc
offfunc: smuXsourceofffuncofffunc

display.smuX.limit.func
func: displaysmuXlimitfuncfunc
func: displaysmuXlimitfuncfunc

smuX.cal.password
newPassword: string