bufferVar.appendmode
state:0|1
bufferVar:bufferVar

bufferVar.cachemode
cacheMode:0|1
bufferVar:bufferVar

bufferVar.capacity
maxNumber:integer
bufferVar:bufferVar

bufferVar.clear()
bufferVar:bufferVar

bufferVar.clearcache()
bufferVar:bufferVar

bufferVar.fillcount
bufferVar:bufferVar
fillCount:integer

bufferVar.fillmode
fillMode:0|1
bufferVar:bufferVar

bufferVar.fractionalseconds
fractionalSec:number
bufferVar:bufferVar
N:integer

bufferVar.measurefunctions
bufferVar:bufferVar
N:integer

bufferVar.measureranges
bufferVar:bufferVar
N:integer

bufferVar.n
numberOfReadings:integer
bufferVar:bufferVar

bufferVar.readings
reading:number
bufferVar:bufferVar
N:integer

bufferVar.seconds
nonFracSeconds:number
bufferVar:bufferVar
N:integer

bufferVar.sourcefunctions
bufferVar:bufferVar
N:integer

bufferVar.sourceoutputstates
state:0|1
bufferVar:bufferVar
N:integer

bufferVar.sourceranges
sourcerange:number[]
bufferVar:bufferVar
N:integer

bufferVar.sourcevalues
sourcevalue:number
bufferVar:bufferVar
N:integer

bufferVar.statuses
bufferVar:bufferVar
N:integer

bufferVar.timestampresolution
resolution:number
bufferVar:bufferVar

bufferVar.timestamps
timestamp: number[]
bufferVar: bufferVar
N:integer

firmware.update()
Z:integer

firmware.verify()
Z:integer

psu[X].abort()
Z:integer
X:integer

psu[X].configlist.create()
Z:integer
X:integer
configListName:string

psu[X].configlist.delete()
Z:integer
X:integer
configListName:string
index:integer

psu[X].configlist.query()
Z:integer
X:integer
configListName:string
index:integer
fieldSeparator:string

psu[X].configlist.recall()
Z:integer
X:integer
configListName:string
index:integer

psu[X].configlist.size()
indexCount:integer
configListName:string

psu[X].configlist.store()
Z:integer
X:integer
configListName:string
index:integer

psu[X].configlist.table()
Z:integer
X:integer

psu[X].defbufferY
bufferVar:bufferVar
Z:integer
X:integer
Y:1|2

psu[X].makebuffer()
bufferVar:bufferVar
Z:integer
X:integer
bufferSize:integer

psu[X].measure.aperture
value:number
Z:integer
X:integer

psu[X].measure.count
count:integer
Z:integer
X:integer

psu[X].measure.nplc
nplc:number
Z:integer
X:integer

psu[X].measure.overlappedY()
Z:integer
X:integer
Y:string
rbuffer: bufferVar
ibuffer: bufferVar
vbuffer: bufferVar

psu[X].measure.rangeY
rangeValue:number
Z:integer
X:integer
Y:string

psu[X].measure.rate
Z:integer
X:integer

psu[X].measure.rel.enableY
Z:integer
X:integer
Y:string

psu[X].measure.rel.levelY
relValue:number
Z:integer
X:integer
Y:string

psu[X].measure.tempcomp
Z:integer
X:integer

psu[X].measure.Y()
reading:number
Z:integer
X:integer
Y:string
readingBuffer: bufferVar

psu[X].overlapped
overlappedMode:0|1
Z:integer
X:integer

psu[X].reset()
Z:integer
X:integer

psu[X].source.constantcurrent
value:boolean
Z:integer
X:integer

psu[X].source.levelv
sourceLevel:number
Z:integer
X:integer

psu[X].source.limiti
value:number
Z:integer
X:integer

psu[X].source.offmode
Z:integer
X:integer

psu[X].source.output
Z:integer
X:integer

psu[X].source.protect.enablei
Z:integer
X:integer

psu[X].source.protect.enablev
Z:integer
X:integer

psu[X].source.protect.leveli
protectLevel:number
Z:integer
X:integer

psu[X].source.protect.levelv
protectLevel:number
Z:integer
X:integer

psu[X].source.protect.trippedi
tripped:boolean
Z:integer
X:integer

psu[X].source.protect.trippedv
tripped:boolean
Z:integer
X:integer

psu[X].source.rangev
value:number
Z:integer
X:integer

psu[X].source.slewratev
value:number
Z:integer
X:integer

psu[X].trigger.measure.Y()
Z:integer
X:integer
Y:string
ReadingBuffer:bufferVar
ibuffer: bufferVar
vbuffer: bufferVar

psu[X].trigger.source.linearY()
Z:integer
X:integer
Y:string
StartY:integer
EndY:integer 
Points:integer

psu[X].trigger.source.listY()
Z:integer
X:integer
Y:string
SourceLevels:integer{}

psu[X].trigger.source.logY()
Z:integer
X:integer
Y:string
StartY:integer
EndY:integer 
Points:integer

trigger.model.abort()
Z:integer
triggerModelName:string

trigger.model.addblock.branch.always()
Z:integer
triggerModelName:string
blockName:string
branchToBlockName:string

trigger.model.addblock.branch.counter()
Z:integer
triggerModelName:string
blockName:string
branchToBlockName:string
targetCount:integer

trigger.model.addblock.branch.event()
Z:integer
triggerModelName:string
blockName:string
branchToBlockName:string

trigger.model.addblock.branch.once()
Z:integer
triggerModelName:string
blockName:string
branchToBlockName:string

trigger.model.addblock.branch.onceexcluded()
Z:integer
triggerModelName:string
blockName:string
branchToBlockName:string

trigger.model.addblock.configlist.next()
Z:integer
triggerModelName:string
blockName:string
channel:integer
configlistName:string

trigger.model.addblock.configlist.prev()
Z:integer
triggerModelName:string
blockName:string
channel:integer
configlistName:string

trigger.model.addblock.configlist.recall()
Z:integer
triggerModelName:string
blockName:string
channel:integer
configlistName:string
index:integer

trigger.model.addblock.delay.constant()
Z:integer
triggerModelName:string
blockName:string
delayTime:number
referenceBlockName:string

trigger.model.addblock.logevent()
Z:integer
triggerModelName:string
blockName:string
message:string

trigger.model.addblock.measure()
Z:integer
triggerModelName:string
blockName:string
count:integer

trigger.model.addblock.nop()
Z:integer
triggerModelName:string
blockName:string

trigger.model.addblock.notify()
Z:integer
triggerModelName:string
blockName:string

trigger.model.addblock.reset.branch.counter()
Z:integer
triggerModelName:string
blockName:string
resetBranchCountBlockName:string

trigger.model.addblock.source.action.bias()
triggerModelName: string
blockName: string
channel: integer


trigger.model.addblock.source.action.skip()
Z:integer
triggerModelName:string
blockName:string
channel:integer

trigger.model.addblock.source.action.step()
Z:integer
triggerModelName:string
blockName:string
channel:integer

trigger.model.addblock.source.output()
Z:integer
triggerModelName:string
blockName:string
channel:integer

trigger.model.addblock.wait()
Z:integer
triggerModelName:string
blockName:string

trigger.model.create()
Z:integer
triggerModelName:string

trigger.model.delete()
Z:integer
triggerModelName:string

trigger.model.initiate()
Z:integer
triggerModelName:string

trigger.model.removeblock()
Z:integer
triggerModelName:string
triggerBlockName:string