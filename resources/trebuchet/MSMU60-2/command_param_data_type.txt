bufferVar.appendmode
state: 0|1

bufferVar.basetimestamp
basetime: number

bufferVar.cachemode
cacheMode: 0|1

bufferVar.capacity
maxNumber: integer
bufferVar: bufferVar

bufferVar.clear()
bufferVar: bufferVar


bufferVar.clearcache()
bufferVar: bufferVar

bufferVar.collectsourcevalues
state: 0|1

bufferVar.collecttimestamps
state: 0|1

bufferVar.fractionalseconds
fractionalSec: number[]

bufferVar.fillcount
fillCount: integer


bufferVar.fillmode
fillMode: bufferVarfillmodefillMode
bufferVar: bufferVar

bufferVar.measurefunctions
measurefunction: string[]
bufferVar: bufferVar

bufferVar.measureranges
measurerange: number[]

bufferVar.n 
numberOfReadings: integer
bufferVar: bufferVar

bufferVar.readings
reading: number[]
bufferVar: bufferVar
N: number

bufferVar.seconds
nonFracSeconds: integer[]

bufferVar.sourcefunctions
sourcefunction: string[]
bufferVar: bufferVar

bufferVar.sourceoutputstates
state: string[]
bufferVar: bufferVar

bufferVar.sourceranges
sourcerange: number[]
bufferVar: bufferVar

bufferVar.sourcevalues
sourcevalue: number[]
bufferVar: bufferVar

bufferVar.statuses
statusInformation: number[]

bufferVar.timestampresolution
resolution: number

bufferVar.timestamps
timestamp: number[]
bufferVar: bufferVar

firmware.update()
z:number

firmware.verify()
z:number

smu[X].abort()
z:number
x:number

smu[X].configlist.create()
z:number
x:number
configListName:string

smu[X].configlist.delete()
z:number
x:number
configListName:string
index:number 

smu[X].configlist.query()
z:number
x:number
configListName:string
index:number 
fieldSeparator:string

smu[X].configlist.recall()
z:number
x:number
configListName:string
index:number

smu[X].configlist.size()
indexCount:number
configListName:string

smu[X].configlist.store()
z:number
x:number
configListName:string
index:number

smu[X].configlist.table()
z:number
x:number

smu[X].contact.calibratehi()
z:number
x:number
cp1Measured:number
cp1Reference:number
cp2Measured:number
cp2Reference:number

smu[X].contact.calibratelo()
z:number
x:number
cp1Measured:number
cp1Reference:number
cp2Measured:number
cp2Reference:number

smu[X].contact.check()
contactCheckResult:boolean
hi:number
lo:number
z:number
x:number

smu[X].contact.r()
hi:number
lo:number
z:number
x:number

smu[X].contact.speed
z:number
x:number

smu[X].contact.threshold
z:number
x:number
contactCheckThreshold:number

smu[X].defbufferY
bufferContents: bufferVar
z:number
x:number

smu[X].guard.v()
reading:number
z:number
x:number

smu[X].makebuffer()
bufferVar:bufferVar
z:number
x:number
bufferSize:number

smu[X].measure.aperture
value:number
z:number
x:number

smu[X].measure.autodelay
z:number
x:number

smu[X].measure.autorangeY
measureAutorange:0|1
z:number
x:number

smu[X].measure.count
count:number
z:number
x:number

smu[X].measure.delay
delay:number
z:number
x:number

smu[X].measure.interval
interval:number
z:number
x:number

smu[X].measure.lowrangeY
measureLowrange:number
z:number
x:number

smu[X].measure.nplc
nplc:number
z:number
x:number

smu[X].measure.overlappedY()
z:number
x:number
rbuffer: bufferVar
ibuffer: bufferVar
vbuffer: bufferVar

smu[X].measure.rangeY
rangeValue:number
z:number
x:number

smu[X].measure.rate
z:number
x:number

smu[X].measure.rel.enableY
z:number
x:number

smu[X].measure.rel.levelY
relValue:number
z:number
x:number

smu[X].measure.tempcomp
z:number
x:number

smu[X].measure.Y()
reading:number
z:number
x:number
readingBuffer: bufferVar

smu[X].overlapped
z:number
x:number

smu[X].reset()
z:number
x:number

smu[X].sense
z:number
x:number

smu[X].source.atlimit
value:boolean
z:number
x:number

smu[X].source.autodelay
z:number
x:number

smu[X].source.autorangeY
z:number
x:number

smu[X].source.constantcurrent
value:boolean
z:number
x:number

smu[X].source.delay
sDelay:number
z:number
x:number

smu[X].source.func
z:number
x:number

smu[X].source.levelY
sourceLevel:number
z:number
x:number

smu[X].source.limitnY
value:number
z:number
x:number

smu[X].source.limitpY
value:number
z:number
x:number

smu[X].source.limitY
value:number
z:number
x:number

smu[X].source.lowrangeY
sourceRangeLow:number
z:number
x:number

smu[X].source.offfunc
z:number
x:number

smu[X].source.offlimitnY
value:number
z:number
x:number

smu[X].source.offlimitpY
value:number
z:number
x:number

smu[X].source.offlimitY
value:number
z:number
x:number

smu[X].source.offmode
z:number
x:number

smu[X].source.output
z:number
x:number

smu[X].source.rangeY
value:number
z:number
x:number

smu[X].trigger.measure.Y()
z:number
x:number
ReadingBuffer:bufferVar
ibuffer: bufferVar
vbuffer: bufferVar

smu[X].trigger.source.linearY()
z:number
x:number
StartY:integer
EndY:integer
Steps:integer
Points: integer

smu[X].trigger.source.listY()
z:number
x:number
SourceLevels:number[]

smu[X].trigger.source.logY()
z:number
x:number
StartY:integer
EndY:integer
Points: integer

trigger.model.abort()
z:number
triggerModelName:string

trigger.model.addblock.branch.always()
z:number
triggerModelName:string
blockName:string
branchToBlockName:string

trigger.model.addblock.branch.counter()
z:number
triggerModelName:string
blockName:string
branchToBlockName:string
targetCount:number

trigger.model.addblock.branch.event()
z:number
triggerModelName:string
blockName:string
branchToBlockName:string

trigger.model.addblock.branch.onceexcluded()
triggerModelName:string
blockName:string
branchToBlockName:string

trigger.model.addblock.branch.once()
z:number
triggerModelName:string
blockName:string
branchToBlockName:string

addblock.branch.onceexcluded()
z:number
triggerModelName:string
blockName:string
branchToBlockName:string

trigger.model.addblock.reset.branch.counter()
z:number
triggerModelName:string
blockName:string
resetBranchCountBlockName:string

trigger.model.addblock.configlist.next()
z:number
triggerModelName:string
blockName:string
channel:number
configlistName:string

trigger.model.addblock.configlist.prev()
z:number
triggerModelName:string
blockName:string
channel:number
configlistName:string

trigger.model.addblock.configlist.recall()
z:number
triggerModelName:string
blockName:string
channel:number
configlistName:string
index:number

trigger.model.addblock.delay.constant()
z:number
triggerModelName:string
blockName:string
delayTime:number
referenceBlockName:string

trigger.model.addblock.logevent()
z:number
triggerModelName:string
blockName:string
message:string

trigger.model.addblock.measure()
z:number
triggerModelName:string
blockName:string
channel:number
count:number

trigger.model.addblock.measureoverlapped()
z:number
triggerModelName:string
blockName:string
channel:number
count:number

trigger.model.addblock.nop()
z:number
triggerModelName:string
blockName:string

trigger.model.addblock.notify()
z:number
triggerModelName:string
blockName:string

trigger.model.addblock.source.action.bias()
z:number
triggerModelName:string
blockName:string
channel:number

trigger.model.addblock.source.action.skip()
z:number
triggerModelName:string
blockName:string
channel:number

trigger.model.addblock.source.action.set()
z:number
triggerModelName:string
blockName:string
channel:number

trigger.model.addblock.source.action.step()
z:number
triggerModelName:string
blockName:string
channel:number
channelList:table

trigger.model.addblock.source.output()
z:number
triggerModelName:string
blockName:string
channel:number

trigger.model.addblock.wait()
z:number
triggerModelName:string
blockName:string

trigger.model.create()
z:number
triggerModelName:string

trigger.model.delete()
z:number
triggerModelName:string

trigger.model.initiate()
z:number
triggerModelName:string

trigger.model.removeblock()
z:number
triggerModelName:string
triggerBlockName:string

trigger.model.state()
z:number
triggerModelName:string
